==================================
Test for module `4-print_square.py`
==================================

Usage
=====

Squares are printed using ``#`` The parameter ``size`` is the bigness

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

If ``size`` is zero, print nothing

::

    >>> print_square(0)

Invalid Sizes
=============

``size`` less than zero, ValueError

::

    >>> print_square(-98)
    Traceback (most recent call last):
    ValueError: size must be >= 0

type-checking before value-checking

::

    >>> print_square(-9.8)
    Traceback (most recent call last):
    TypeError: size must be an integer

at least one argument

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'

``size`` must be an integer. Otherwise, TypeError

::

    >>> print_square("Jeremy")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(9.8)
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    TypeError: size must be an integer

