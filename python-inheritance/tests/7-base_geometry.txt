Importing the function:
        >>> a = __import__("7-base_geometry").BaseGeometry

module docstring:
         >>> b = __import__("7-base_geometry").__doc__
         >>> len(b) > 1
         True

class docstring:
         >>> c = __import__("7-base_geometry").BaseGeometry.__doc__
         >>> len(c) > 1
         True

method docstring:
	  >>> d = __import__("7-base_geometry").BaseGeometry.area.__doc__
	  >>> len(d) > 1
	  True
	  >>> e = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
          >>> len(e) > 1
          True

area failure:
	  >>> g = a()
	  >>> g.area()
	  Traceback (most recent call last):
	  ...
	  Exception: area() is not implemented

too many arguments for area:
	  >>> f.area(1)
	  Traceback (most recent call last):
          ...
	  TypeError: area() takes 1 positional argument but 2 were given

integer:
	  >>> g.integer_validator("integer", 9)

integer == 0:
	  >>> g.integer_validator("integer", 0)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

integer < 0;
	  >>> g.integer_validator("integer", -5)
	  Traceback (most recent call last):
          ...
          ValueError: integer must be greater than 0

too many arguments:
	  >>> g.integer_validator("integer", 9, 8)
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() takes 3 positional arguments but 4 were given

non-integer types:
	  >>> g.integer_validator("bytearrays", bytearray(b"bytes"))
          Traceback (most recent call last):
          ...
          TypeError: bytearrays must be an integer
	  >>> g.integer_validator("bool", True)
	  Traceback (most recent call last):
          ...
          TypeError: bool must be an integer
	  >>> g.integer_validator("float", 1.5)
          Traceback (most recent call last):
          ...
          TypeError: float must be an integer
	  >>> g.integer_validator("complex", complex(1, 1))
          Traceback (most recent call last):
          ...
          TypeError: complex must be an integer
	  >>> g.integer_validator("string", "hello")
          Traceback (most recent call last):
          ...
          TypeError: string must be an integer
	  >>> g.integer_validator("tuple", (1, 2))
          Traceback (most recent call last):
          ...
          TypeError: tuple must be an integer
	  >>> g.integer_validator("list", [1, 2, 3])
	  Traceback (most recent call last):
          ...
          TypeError: list must be an integer
	  >>> g.integer_validator("dict", {"key": "value"})
          Traceback (most recent call last):
          ...
          TypeError: dict must be an integer
	  >>> g.integer_validator("set", {"hello", "world"})
          Traceback (most recent call last):
          ...
          TypeError: set must be an integer
	  >>> g.integer_validator("frozenset", frozenset(["hello", "world"]))
          Traceback (most recent call last):
          ...
          TypeError: frozenset must be an integer
	  >>> g.integer_validator("bytes", b"bytes")
          Traceback (most recent call last):
          ...
          TypeError: bytes must be an integer

no arguments to integer_validator:
	  >>> g.integer_validator()
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

only 1 argument to integer_validator:
	  >>> g.integer_validator("integer")
	  Traceback (most recent call last):
          ...
	  TypeError: integer_validator() missing 1 required positional argument: 'value'
